#!/bin/bash

# Function to get version information
get_version_info() {
    # Try to get the latest tag and commit info
    local latest_tag=$(git describe --tags --abbrev=0 2>/dev/null)
    if [ -z "$latest_tag" ]; then
        echo "dev-$(git rev-parse --short HEAD)" # If no tags, use commit hash
        return
    fi

    # Check if working directory is clean
    if ! git diff-index --quiet HEAD --; then
        # Changes detected - this is a development version
        local tag_version=$(echo $latest_tag | sed 's/^v//')
        echo "${tag_version}-dev"
        return
    fi

    # Check if we're exactly on a tag
    if git describe --exact-match --tags HEAD >/dev/null 2>&1; then
        # We're on a release tag
        echo "${latest_tag#v}"
        return
    else
        # We're on a clean commit but not a tag
        echo "dev-$(git rev-parse --short HEAD)"
    fi
}

# Get version info
VERSION=$(get_version_info)
echo "Building version: $VERSION"

if [ -d "src" ]; then
    echo "Found src directory"
else
    echo "ERROR: src directory not found!"
    exit 1
fi

# Create version.lua that will be included in the bundle
cat > src/version.lua << EOL
-- Generated by build script
return {
    VERSION = '${VERSION}',
    COMMIT = '$(git rev-parse --short HEAD)',
    BRANCH = '$(git rev-parse --abbrev-ref HEAD)',
    BUILD_DATE = '$(date '+%Y-%m-%d %H:%M:%S')'
}
EOL

# Create dist directory
mkdir -p dist
rm -rf dist/*

# Build core bundle using luacc
echo 'Building core bundle...'
echo "Attempting to build from $(pwd)"

cd src
echo "Working from $(pwd)"

# Find all .lua files in current directory, strip .lua extension, exclude init and version
MODULES="version $(find . -maxdepth 1 -name "*.lua" ! -name "init.lua" ! -name "version.lua" -exec basename {} .lua \;)"
echo "Found modules: $MODULES"

# Use luacc with found modules
luacc \
    -o ../dist/bng-cc-core.lua \
    -i . \
    init \
    $MODULES

cd ..

# Only continue if the bundle was created successfully
if [ ! -f "dist/bng-cc-core.lua" ]; then
    echo "ERROR: Bundle creation failed"
    exit 1
fi

# Create minified version
echo 'Minifying bng-cc-core.lua...'
mkdir -p dist/release

# Save header comments with git tag version
echo "-- bng-cc-core by bngarren" > dist/release/bng-cc-core.min.lua
echo "-- MIT License" >> dist/release/bng-cc-core.min.lua
echo "-- Version $VERSION" >> dist/release/bng-cc-core.min.lua
echo "-- Generated $(date '+%Y-%m-%d %H:%M:%S')" >> dist/release/bng-cc-core.min.lua

# Minify using luamin
CONTENT=$(cat dist/bng-cc-core.lua)
if [ -n "$CONTENT" ]; then
    echo "$CONTENT" | luamin -c >> dist/release/bng-cc-core.min.lua
else
    echo "ERROR: No content to minify"
    exit 1
fi

echo "Build complete! Output files:"
ls -s dist/release/